<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!-- Build file containing macros for code generatation for AdWords.         -->
<!-- ======================================================================= -->
<project name="common-generate-adwords">
  <import file="common-generate.ant.xml"/>

  <!-- ===================================================================== -->
  <!-- Macro: Generates the java for a @{version}.                           -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-version-of-an-api">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <property name="hasgroups" value="false"/>
      <trycatch>
        <try>
          <propertycopy name="hasgroups"
              from="api.@{api.name}.version.@{version}.hasgroups"
              override="true"/>
        </try>
        <catch>
        </catch>
      </trycatch>
      <if>
        <istrue value="${hasgroups}"/>
        <then>
          <generate-java-for-all-groups-of-a-version api.name="@{api.name}"
              version="@{version}"
              groups=
                  "${api.@{api.name}.version.@{version}.groups}"
              src.output.dir="@{src.output.dir}"/>
        </then>
        <else>
          <generate-java-for-all-services-of-a-version
              api.name="@{api.name}"
              version="@{version}"
              services=
                  "${api.@{api.name}.version.@{version}.services}"
              src.output.dir="@{src.output.dir}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Generates the java for all @{groups} of a                      -->
  <!-- @{version}.                                                           -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-all-groups-of-a-version">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="groups"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <for list="@{groups}" param="group">
        <sequential>
          <load-group-override-properties
              api.name="@{api.name}"
              version="@{version}"
              group="@{group}"/>
          <generate-java-for-all-services-of-a-group
              api.name="@{api.name}"
              version="@{version}"
              group="@{group}"
              group.package.part=
                  "${@{api.name}.@{version}.@{group}.package}"
              group.url.part=
                  "${@{api.name}.@{version}.@{group}.url}"
              group.services=
                  "${api.@{api.name}.version.@{version}.@{group}.services}"
              src.output.dir="@{src.output.dir}"/>
        </sequential>
      </for>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Generates the java for all @{group.services} of a              -->
  <!-- @{group}.                                                             -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-all-services-of-a-group">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="group"/>
    <attribute name="group.services"/>
    <attribute name="group.package.part"/>
    <attribute name="group.url.part"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <for list="@{group.services}"
          param="service">
        <sequential>
          <generate-java-for-service-with-group
              api.name="@{api.name}"
              version="@{version}"
              group="@{group}"
              group.package.part="@{group.package.part}"
              group.url.part="@{group.url.part}"
              service="@{service}"
              src.output.dir="@{src.output.dir}"/>
        </sequential>
      </for>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Generates code for a service with a group. Can be overridden   -->
  <!-- by a frameworks build.xml.                                            -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-service-with-group">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="group"/>
    <attribute name="group.package.part"/>
    <attribute name="group.url.part"/>
    <attribute name="service"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <var name="service.wsdl.url.arg" unset="true"/>
      <var name="service.wsdl.url.arg"
          value="${api.@{api.name}.server.default}/@{group.url.part}/@{version}/@{service}${api.@{api.name}.wsdl.postfix}"/> 
      <echo message="${service.wsdl.url.arg}"/>
      <generate-java-for-service
          namespacemapping=
              "${api.@{api.name}.version.@{version}.namespacemapping}"
          version.package.default=
              "${api.@{api.name}.version.@{version}.defaultpackage}"
          service="@{service}"
          service.package=
              "${api.@{api.name}.package.prefix}.@{version}.@{group.package.part}"
          service.wsdl.url=
              "${service.wsdl.url.arg}"
          src.output.dir="@{src.output.dir}"/>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro(override): Generates the java for all                           -->
  <!-- @{group.services} of a @{version}.                    -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-all-services-of-a-version">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="services"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <for list="@{services}" param="service">
        <sequential>
          <generate-java-for-service-without-group
              api.name="@{api.name}"
              version="@{version}"
              service="@{service}"
              src.output.dir="@{src.output.dir}"/>
        </sequential>
      </for>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Generates code for a service with a group. Can be overridden   -->
  <!-- by a frameworks build.xml.                                            -->
  <!-- ===================================================================== -->
  <macrodef name="generate-java-for-service-without-group">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="service"/>
    <attribute name="src.output.dir"/>
    <sequential>
      <generate-java-for-service
          namespacemapping=
              "${api.@{api.name}.version.@{version}.namespacemapping}"
          version.package.default=
              "${api.@{api.name}.version.@{version}.defaultpackage}"
          service="@{service}"
          service.package=
              "${api.@{api.name}.package.prefix}.@{version}"
          service.wsdl.url=
              "${api.@{api.name}.server.default}/@{version}/@{service}${api.@{api.name}.wsdl.postfix}"
          src.output.dir="@{src.output.dir}"/>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Loads group overrides into                                     -->
  <!-- ${@{api.name}.@{version}.@{group}.package} and                        -->
  <!-- ${@{api.name}.@{version}.@{group}.url}                                -->
  <!-- ===================================================================== -->
  <macrodef name="load-group-override-properties">
    <attribute name="api.name"/>
    <attribute name="version"/>
    <attribute name="group"/>
    <sequential>
      <!-- Create package override into                                    -->
      <!-- ${@{api.name}.@{version}.@{group}.package}                      -->
      <var name="property.package.name"
          value="@{api.name}.@{version}.@{group}.package"/>
      <trycatch>
        <try>
          <propertycopy property="${property.package.name}"
              from="api.@{api.name}.version.@{version}.@{group}.package"
              override="true"/>
        </try>
        <catch>
          <property name="${property.package.name}" value="@{group}"/>
        </catch>
      </trycatch>

      <!-- Create URL override into                                        -->
      <!-- ${@{api.name}.@{version}.@{group}.url}                          -->
      <var name="property.url.name"
             value="@{api.name}.@{version}.@{group}.url"/>
      <trycatch>
        <try>
          <propertycopy property="${property.url.name}"
                from="api.@{api.name}.version.@{version}.@{group}.url"
                override="true"/>
        </try>
        <catch>
          <property name="${property.url.name}"
                value="@{group}"/>
        </catch>
      </trycatch>
    </sequential>
  </macrodef>

  <!-- ===================================================================== -->
  <!-- Macro: Generates the code for all @versions of an @api.name.          -->
  <!-- Called. from within a framework's build.xml.                          -->
  <!-- ===================================================================== -->
  <macrodef name="generate-jaxb-java-for-all-versions-of-an-api">
    <attribute name="api.name"/>
    <attribute name="src.output.dir"/>
    <attribute name="schemaKey"/>
    <sequential>
      <for list="${api.@{api.name}.versions}" param="version">
        <sequential>
          <var name="service.xsd.url.arg" unset="true"/>
          <var name="service.xsd.url.arg"
              value="${api.adwords.server.default}/${api.adwords.version.@{version}.schema.@{schemaKey}}"/>   
          <echo message="${service.xsd.url.arg}"/>
          <generate-jaxb-java-for-version-of-an-api
              api.name="@{api.name}" version="@{version}"
              src.output.dir="@{src.output.dir}" schema.url="${service.xsd.url.arg}" />
        </sequential>
      </for>
    </sequential>
  </macrodef>
  
  <!-- ===================================================================== -->
  <!-- Target: Generates code for AdWords that is not framework dependent.   -->
  <!-- ===================================================================== -->
  <target name="generate-java">
    <property name="api.name" value="adwords" />
    <property name="src.dir" value="." />
    <load-api-properties api.name="${api.name}"
        api.properties.file="${api.properties.file}" />
    <mkdir dir="${src.dir}" />
    <generate-jaxb-java-for-all-versions-of-an-api api.name="${api.name}"
        src.output.dir="${src.dir}" schemaKey="reportXsd" />
  </target>
</project>
